/*
Plugin Name: AgilePress <?php _e(get_bloginfo());?> Extension
Description: A custom extension of AgilePress that allows custom functionality for <?php _e(get_bloginfo());?>  website
Version: 0.1.0
Author: AgilePress Core Development Team
*/

/**
 * WARNING: THIS FILE SHOULD NOT BE MODIFIED!
 * 
 * This file is autogenerated based on configurations set through
 * the AgilePress plugin. Susequent code generations will overwrite
 * this file.
 */
// Constants
define( 'APEXT_VERSION', '0.1.0');
define( 'APEXT_PLUGIN_URL', plugin_dir_url( __FILE__ ));
define( 'APEXT_PATH', plugin_dir_path(__FILE__) );
define( 'APEXT_BASENAME', plugin_basename( __FILE__ ) );

// Paths
define( 'APEXT_POST_TYPES_PATH', APEXT_PATH . '/post-types' );
define( 'APEXT_USER_TYPES_PATH', APEXT_PATH . '/user-type' );
define( 'APEXT_CONTROLS_PATH', APEXT_PATH . '/controls' );
define( 'APEXT_AUTO_INCLUDES_PATH', APEXT_PATH . '/auto-includes' );
define( 'APEXT_INSTALL_PATH', APEXT_PATH . '/install' );
define( 'APEXT_USER_PATH', APEXT_PATH . '/user' );
define( 'APEXT_POST_PATH', APEXT_PATH . '/post' );



// Custom Post Types
define ( 'AP_CUSTOM_POST_TYPES', 
	serialize(
		array(
		<?php 
$i = 0;
$len = count($this->objConfigData->posttypes->posttype);
foreach($this->objConfigData->posttypes->posttype as $objPostType){
	$objPostType = unserialize($objPostType);
	$strComma = ($i < $len - 1) ? "," : "";
	echo "\t 'AP_". str_replace(" ", "" , $objPostType[0]['singular_name']) . "Type'" . $strComma . " \n";
}
		?>
		)
	)
);

// Run your app!
if (apext_is_agilepress_active() && apext_is_extension_agilepress_active() && apext_plugin_activation_check()) {
	
//////////////
// Includes //
//////////////
	// Custom configuration
	require_once(APEXT_PATH . 'configuration.inc.php' );

	require_once( APEXT_PATH . 'AP_Application.class.php' );
	require_once( APEXT_POST_PATH . '/AP_PostItem.class.php');
	
	//Custom Post types
	<?php 
	foreach($this->objConfigData->posttypes->posttype as $objPostType){
		$objPostType = unserialize($objPostType);
		$objPostType[0]['singular_name'] = str_replace(" ", "" , $objPostType[0]['singular_name']);
		echo "\t// Includes for CustomPostType ". $objPostType[0]['singular_name']. " \n";
		echo "\t\t require_once(APEXT_POST_TYPES_PATH . '/generated/AP_" . $objPostType[0]['singular_name'] . "TypeGen.class.php'); \n";
		echo "\t\t require_once(APEXT_POST_PATH . '/generated/AP_" . $objPostType[0]['singular_name'] . "ItemGen.class.php'); \n";
		echo "\t\t require_once(APEXT_POST_TYPES_PATH . '/AP_" . $objPostType[0]['singular_name'] . "Type.class.php'); \n";
		echo "\t\t require_once(APEXT_POST_PATH . '/AP_" . $objPostType[0]['singular_name'] . "Item.class.php'); \n\n";
	}
	?>
	
	//Custom User Types
	<?php 
	foreach($this->objConfigData->usertypes->usertype as $objUserType){
		$objUserType = unserialize($objUserType);
		$objUserType[0]['singular_name'] = str_replace(" ", "" , $objUserType[0]['singular_name']);
		echo "\t// Includes for CustomUserType ". $objUserType[0]['singular_name']. " \n";
		echo "\t\t require_once(APEXT_USER_TYPES_PATH . '/generated/AP_" . $objUserType[0]['singular_name'] . "TypeGen.class.php'); \n";
		echo "\t\t require_once(APEXT_USER_TYPES_PATH . '/AP_" . $objUserType[0]['singular_name'] . "Type.class.php'); \n";
	}
	?>
	
	// Install
	require_once( APEXT_INSTALL_PATH . '/AP_Install.class.php' );
	
	// User
	require_once( APEXT_USER_PATH . '/AP_User.class.php' );
	
	// Post
	require_once( APEXT_POST_PATH . '/AP_PostQuery.class.php');

	
	// Hook into framework
	require_once(APEXT_PATH . 'prepend.inc.php');
	
/////////////////
// End Includes//
/////////////////
		

	
	$app = new AP_Application();
	$app->Run();
	
}


// =========================================
// ACTIVATION ORDER
// =========================================
//register_activation_hook( __FILE__, 'apext_plugin_activation_check' );
add_action( 'admin_init', 'apext_plugin_activation_check' );

/**
 * Main function that checks if the plugin should be activated
 */
function apext_plugin_activation_check(){
	if (apext_is_agilepress_active()) {
		$plugins = get_option( 'active_plugins' ); // Array of active plugins (this is a WordPress core option)		
		$ap_plugin_basename = apext_get_agilepress_plugin_basename();
		
		
		// AgilePress is active! Let's make sure it's at the front of the line now
		if ( $key = array_search( $ap_plugin_basename, $plugins ) ) {
			array_splice( $plugins, $key, 1 );
			array_unshift( $plugins, $ap_plugin_basename );
			update_option( 'active_plugins', $plugins );
			return false; 
		}
	}
	else {
		// AgilePress is not active, add a notice so the user knows to activate AgilePress
		add_action( 'admin_notices', 'apext_notice_agilepress_deactivated');
	}
	
	apext_add_extension_setting();
	
	return true;
}

/**
 * Returns the basename of AgilePress. 
 * Unless modified, this should be agilepress/agilepress.php
 * @return string - basename of AgilePress plugin
 */
function apext_get_agilepress_plugin_basename() {
	$ap_plugin_basename = null;
	if ($ap_settings = get_option('agilepress_settings')) { // AgilePress settings
	
		// Path name of AgilePress that should be stored in active plugins is stored in AgilePress settings
		$ap_plugin_basename = array_key_exists('basename', $ap_settings) ? $ap_settings['basename'] : null;
	}
	
	return $ap_plugin_basename;
}

/**
 * Checks if AgilePress is an active plugin
 * @return boolean
 */
function apext_is_agilepress_active() {
	$plugins = get_option( 'active_plugins' );
	$ap_plugin_basename = apext_get_agilepress_plugin_basename();
	
	if (array_search($ap_plugin_basename, $plugins) === false)
		return false;
	return true;
}

/**
 * Checks if AgilePress Extension is an active plugin
 * @return boolean
 */
function apext_is_extension_agilepress_active() {
	$plugins = get_option( 'active_plugins' );
	
	if (array_search(APEXT_BASENAME, $plugins) === false)
		return false;
	return true;
}


/**
 * Adds the extension basename to the AgilePress settings. This allows AgilePress and
 * AgilePress Extension to reference each other in order to maintain plugin dependency.
 */
function apext_add_extension_setting() {
	$ap_settings = get_option('agilepress_settings');
	
	if (!is_array($ap_settings))
		$ap_settings = array();
	
	$ap_settings['extension'] = APEXT_BASENAME;
	update_option('agilepress_settings', $ap_settings);
}

/**
 * Deactivates the AgilePress Extension plugin
 */
function apext_deactivate_extension_plugin() {
	if ($plugins = get_option( 'active_plugins' )) {
	
		$key = array_search( APEXT_BASENAME, $plugins );
		if ($key === false) { // 0 can be an index, so we use the triple "=" to evaluate a boolean
			// do nothing -- AP Extension is not active	
		}
		else {
			// deactivate AP Extension by removing it from the active plugins option
			array_splice( $plugins, $key, 1 );
			update_option( 'active_plugins', $plugins );
		}
	}
}

/**
 * Displays notice that AgilePress must be activated in order for this plugin to be activated
 */
function apext_notice_agilepress_deactivated(){
	global $current_screen;
	if ( $current_screen->parent_base == 'plugins' )
		$plugin_data = get_plugin_data(__FILE__);
	echo '<div class="error"><p>AgilePress (base plugin) must be activated first for the extension plugin to work. If AgilePress is already active, deactivate and reactivate the plugin.</p></div>';
}